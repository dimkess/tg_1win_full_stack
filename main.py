import asyncio
import sqlite3
import os
from fastapi import FastAPI
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, RetryAfter
from dotenv import load_dotenv
import uvicorn

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
app = FastAPI()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
db_path = os.getenv("DB_PATH", "users.db")
conn = sqlite3.connect(db_path, check_same_thread=False)
cursor = conn.cursor()
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER PRIMARY KEY,
        user_id TEXT,
        status TEXT
    )
    """
)
conn.commit()

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ì–æ—Ç–æ–≤ –∏–∑–º–µ–Ω–∏—Ç—å –∂–∏–∑–Ω—å!", callback_data="register"),
        InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction"),
        InlineKeyboardButton("Help", callback_data="help")
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
@dp.message_handler(commands=["start", "menu"])
async def cmd_start(message: types.Message):
    telegram_id = message.from_user.id
    cursor.execute(
        "INSERT OR IGNORE INTO users (telegram_id, status) VALUES (?, ?)"\,
        (telegram_id, "start")
    )
    conn.commit()

    photo_url = "https://i.ibb.co/xtnY7Dvn/255ef825-defe-483d-a576-e5c6066e940b.png"
    caption = (
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ 1WIN.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ì–æ—Ç–æ–≤ –∏–∑–º–µ–Ω–∏—Ç—å –∂–∏–∑–Ω—å!\" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )
    await message.answer_photo(
        photo=photo_url,
        caption=caption,
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data == "register")
async def process_register(callback_query: types.CallbackQuery):
    telegram_id = callback_query.from_user.id
    link = f"https://1win.example.com/registration?sub1={telegram_id}"

    photo_url = "https://i.ibb.co/xtnY7Dvn/255ef825-defe-483d-a576-e5c6066e940b.png"
    caption = (
        "üöÄ –î—Ä—É–∂–∏—â–µ!\n\n"
        "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ 1WIN, –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Å—Å—ã–ª–∫—É:\n"
        f"üëâ <b><a href=\"{link}\">–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∑–¥–µ—Å—å</a></b>\n\n"
        "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥–µ–ø–æ–∑–∏—Ç–∞ —Ç—ã –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å."
    )
    await callback_query.message.answer_photo(
        photo=photo_url,
        caption=caption,
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data in ["instruction", "help"])
async def show_help(callback_query: types.CallbackQuery):
    text = (
        "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        "1. –ù–∞–∂–º–∏ \"–ì–æ—Ç–æ–≤ –∏–∑–º–µ–Ω–∏—Ç—å –∂–∏–∑–Ω—å!\".\n"
        "2. –ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ.\n"
        "3. –ü–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞ –∂–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞.\n"
    )
    await callback_query.message.answer(text, reply_markup=get_main_menu())
    await callback_query.answer()

# Webhook FastAPI
@app.post("/postback")
async def postback(event: str = None, user_id: str = None, sub1: str = None, amount: float = 0):
    if not sub1 or not sub1.isdigit():
        return {"status": "error", "reason": "invalid sub1"}

    telegram_id = int(sub1)
    cursor.execute(
        "INSERT OR REPLACE INTO users (telegram_id, user_id, status) VALUES (?, ?, ?)"\,
        (telegram_id, user_id, event)
    )
    conn.commit()

    try:
        if event == "registration":
            text = "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–Ω–µ—Å–∏ –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤."
        elif event == "deposit":
            text = f"üí∞ –î–µ–ø–æ–∑–∏—Ç –Ω–∞ {amount}‚ÇΩ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –°–∏–≥–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!"
        else:
            text = f"üîî –°–æ–±—ã—Ç–∏–µ {event} –ø–æ–ª—É—á–µ–Ω–æ."
        await bot.send_message(chat_id=telegram_id, text=text)
    except BotBlocked:
        cursor.execute(
            "UPDATE users SET status = ? WHERE telegram_id = ?"\,
            ("bot_blocked", telegram_id)
        )
        conn.commit()
    except ChatNotFound:
        pass
    except RetryAfter as e:
        await asyncio.sleep(e.timeout)

    return {"status": "ok"}

# –ó–∞–ø—É—Å–∫

def main():
    from threading import Thread
    def start_api():
        uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
    Thread(target=start_api, daemon=True).start()
    executor.start_polling(dp, skip_updates=True)

if __name__ == "__main__":
    main()
