import asyncio
import sqlite3
import threading
from fastapi import FastAPI
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from dotenv import load_dotenv
import os
import uvicorn

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
app = FastAPI()

conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER,
        user_id TEXT,
        status TEXT,
        PRIMARY KEY (telegram_id, user_id)
    )
""")
conn.commit()

@dp.message_handler()
async def handle_user_id(message: Message):
    if message.text.isdigit():
        telegram_id = message.from_user.id
        user_id = message.text.strip()

        cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (telegram_id,))
        user = cursor.fetchone()

        if user:
            await message.answer("‚è≥ ID —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.")
            return

        cursor.execute(
            "INSERT INTO users (telegram_id, user_id, status) VALUES (?, ?, ?)",
            (telegram_id, user_id, "id_sent")
        )
        conn.commit()
        await message.answer(f"üïê ID {user_id} –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ù–∞–ø–∏—à—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    else:
        await message.answer("‚ùó –û—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ ID, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.")

@app.get("/postback")
async def postback(event: str, user_id: str, sub1: str, amount: str = "0"):
    if not sub1.isdigit():
        print(f"‚ùå sub1 –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: {sub1}")
        return {"status": "invalid telegram_id"}

    telegram_id = int(sub1)

    cursor.execute("SELECT * FROM users WHERE telegram_id = ? AND user_id = ?", (telegram_id, user_id))
    user = cursor.fetchone()

    if not user:
        cursor.execute(
            "INSERT OR IGNORE INTO users (telegram_id, user_id, status) VALUES (?, ?, ?)",
            (telegram_id, user_id, event)
        )
    else:
        cursor.execute(
            "UPDATE users SET status = ? WHERE telegram_id = ? AND user_id = ?",
            (event, telegram_id, user_id)
        )
    conn.commit()

    if event == "registration":
        text = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è ID {user_id}"
    elif event == "deposit":
        text = f"üí∞ –î–µ–ø–æ–∑–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ –¥–ª—è ID {user_id}"
    else:
        text = f"üì© –°–æ–±—ã—Ç–∏–µ {event} –¥–ª—è ID {user_id}"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ aiogram –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ–±—ã—Ç–∏–π–Ω–æ–º —Ü–∏–∫–ª–µ
    await send_notification(telegram_id, text)

    return {"status": "ok"}

from aiogram.utils.exceptions import BotBlocked, ChatNotFound, RetryAfter
async def send_notification(chat_id, text):
    try:
        print(f"üì§ –ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram ID {chat_id}: {text}")
        await bot.send_message(chat_id, text)
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Telegram ID {chat_id}")
    except BotBlocked:
        print(f"‚ùå –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Telegram ID {chat_id}")
    except ChatNotFound:
        print(f"‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Telegram ID {chat_id}")
    except RetryAfter as e:
        print(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {e.timeout} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(e.timeout)
        await bot.send_message(chat_id, text)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Telegram ID {chat_id}: {e}")

async def start_bot_polling():
    try:
        await dp.start_polling()
    finally:
        await bot.session.close()

def start():
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI –∏ aiogram –≤ –æ–¥–Ω–æ–º —Å–æ–±—ã—Ç–∏–π–Ω–æ–º —Ü–∏–∫–ª–µ
    loop = asyncio.get_event_loop()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º aiogram polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ—Ä—É—Ç–∏–Ω–µ
    loop.create_task(start_bot_polling())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —á–µ—Ä–µ–∑ uvicorn
    config = uvicorn.Config(app, host="0.0.0.0", port=8000, loop="asyncio")
    server = uvicorn.Server(config)
    loop.run_until_complete(server.serve())

if __name__ == "__main__":
    start()
