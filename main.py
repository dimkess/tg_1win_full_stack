import asyncio
import sqlite3
from fastapi import FastAPI
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, RetryAfter
from dotenv import load_dotenv
import os
import uvicorn
import threading

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
app = FastAPI()

conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER PRIMARY KEY,
        user_id TEXT,
        status TEXT
    )
""")
conn.commit()

DEBUG_TELEGRAM_ID = 1266217883

@dp.message_handler(commands=['start'])
async def send_welcome(message: Message):
    telegram_id = message.from_user.id
    cursor.execute("SELECT status FROM users WHERE telegram_id = ?", (telegram_id,))
    user = cursor.fetchone()
    
    if user and user[0] in ["registration", "deposit"]:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–Ω–µ—Å–∏—Ç–µ –¥–µ–ø–æ–∑–∏—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.")
        return

    keyboard = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text="“≤–∞, –º–µ–Ω “≥–∞—ë—Ç–∏–º–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à–≥–∞ —Ç–∞–π—ë—Ä–º–∞–Ω!", callback_data="ready_to_change")
    keyboard.add(button)

    welcome_text = (
        "üëã **–°–∞–ª–æ–º, –∞–∑–∏–∑ –¥—û—Å—Ç!**\n\n"
        "–ú–µ–Ω ‚Äî —Ç–∞–∂—Ä–∏–±–∞–ª–∏ –¥–∞—Å—Ç—É—Ä—á–∏, –≤–∞ –º–µ–Ω–¥–∞ —Å–µ–Ω —É—á—É–Ω “≥–∞“õ–∏“õ–∏–π –ª–∞–π—Ñ—Ö–∞–∫ –±–æ—Ä! üí°\n\n"
        "üíª –î–∞—Å—Ç—É—Ä—á–∏–ª–∞—Ä —è—Ö—à–∏ –ø—É–ª —Ç–æ–ø–∏—à–∞–¥–∏, –ª–µ–∫–∏–Ω *“≥–∞–º–º–∞–¥–∞–Ω –∫—û–ø—Ä–æ“õ* –¥–∞—Ä–æ–º–∞–¥ “õ–∏–ª–º–æ“õ—á–∏–º–∏—Å–∏–∑?\n\n"
        "ü§ñ –ú–µ–Ω ChatGPT –∞—Å–æ—Å–∏–¥–∞ –∏—à–ª–∞–π–¥–∏–≥–∞–Ω –±–æ—Ç –≤–∞ –∏–ª–æ–≤–∞ —è—Ä–∞—Ç–¥–∏–º. –£ **Aviator** —û–π–∏–Ω–∏–¥–∞–≥–∏ —Å–∏–≥–Ω–∞–ª–∞—Ä–Ω–∏ *95% –∞–Ω–∏“õ–ª–∏–∫–¥–∞* —Ç–∞—Ö–º–∏–Ω “õ–∏–ª–∞–¥–∏! üéØ\n\n"
        "üîÅ –ë—É –∏–º–∫–æ–Ω–∏—è—Ç “≥–∞—ë—Ç–∏–Ω–≥–∏–∑–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à–≥–∞ —ë—Ä–¥–∞–º –±–µ—Ä–∞–¥–∏!\n\n"
        "‚ú® **“≤–∞—ë—Ç–∏–Ω–≥–∏–∑–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à–≥–∞ —Ç–∞–π—ë—Ä–º–∏—Å–∏–∑?**"
    )

    photo_url = "https://i.ibb.co/fd2zyZ0D/1a3411a4-db55-46b3-84a8-f4da1b57aeff.png"
    cursor.execute("INSERT OR IGNORE INTO users (telegram_id, user_id, status) VALUES (?, ?, ?)",
                   (telegram_id, '', 'waiting_for_button'))
    conn.commit()

    await message.answer_photo(photo=photo_url, caption=welcome_text, reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query_handler(lambda c: c.data == "ready_to_change")
async def handle_button(callback_query: types.CallbackQuery):
    telegram_id = callback_query.from_user.id
    link = f"https://1wtsmf.com/v3/aviator-fire?p=1ylh&sub1={telegram_id}"

    register_keyboard = InlineKeyboardMarkup()
    register_button = InlineKeyboardButton(text="üìù –†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à", url=link)
    register_keyboard.add(register_button)
    register_keyboard.add(InlineKeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', callback_data='menu'))

    caption = (
        f"üöÄ <b>“ö–∞—Ä–∞, –¥—û—Å—Ç–∏–º!</b>\n\n"
        f"–ê–≤–≤–∞–ª–æ –º–∞–Ω–∞ –±—É “≥–∞–≤–æ–ª–∞ –æ—Ä“õ–∞–ª–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à–∏–Ω–≥ –∫–µ—Ä–∞–∫:\nüëâ <a href=\"{link}\">{link}</a>\n\n"
        "üîë –ö–µ–π–∏–Ω –±–æ—Ç —û–∑–∏–Ω–≥–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∫ —Ç–∞–Ω–∏–± –æ–ª–∞–¥–∏.\n\n"
        "‚è≥ –ê–≥–∞—Ä 5 –¥–∞“õ–∏“õ–∞ –∏—á–∏–¥–∞ —Ö–∞–±–∞—Ä –∫–µ–ª–º–∞—Å–∞ ‚Äî \n"
        "1Ô∏è‚É£ –ë–∞–ª–∫–∏ —Å–µ–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–º–∞–≥–∞–Ω—Å–∞–Ω.\n"
        "2Ô∏è‚É£ –Å–∫–∏ —Å–µ–Ω–¥–∞ –æ–ª–¥–∏–Ω–¥–∞–Ω –º–∞–≤–∂—É–¥ –±—û–ª–≥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –±–æ—Ä.\n\n"
        "üìñ <b>–ô—û—Ä–∏“õ–Ω–æ–º–∞–Ω–∏ —û“õ–∏–±, —è–Ω–≥–∏ –∞–∫–∫–∞—É–Ω—Ç —è—Ä–∞—Ç!</b>"
    )

    cursor.execute("UPDATE users SET status = ? WHERE telegram_id = ?", ("waiting_postback", telegram_id))
    conn.commit()

    await callback_query.message.answer_photo(
        photo="https://i.ibb.co/xtnY7Dvn/255ef825-defe-483d-a576-e5c6066e940b.png",
        caption=caption,
        reply_markup=register_keyboard,
        parse_mode="HTML"
    )
    await callback_query.answer()

@app.get("/postback")
async def postback(event: str, user_id: str, sub1: str, amount: str = "0"):
    if not sub1.isdigit():
        await send_notification(DEBUG_TELEGRAM_ID, f"‚ùå sub1 –Ω–µ —á–∏—Å–ª–æ: {sub1}")
        return {"status": "invalid telegram_id"}

    telegram_id = int(sub1)

    cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (telegram_id,))
    user = cursor.fetchone()

    if not user:
        cursor.execute("INSERT OR IGNORE INTO users (telegram_id, user_id, status) VALUES (?, ?, ?)",
                       (telegram_id, user_id, event))
    else:
        cursor.execute("UPDATE users SET user_id = ?, status = ? WHERE telegram_id = ?",
                       (user_id, event, telegram_id))
    conn.commit()

    if event == "registration":
        text = (
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è ID {user_id}\n"
            f"üì• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤!"
        )
    elif event == "deposit":
        text = (
            f"üí∞ –î–µ–ø–æ–∑–∏—Ç –Ω–∞ {amount}‚ÇΩ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –¥–ª—è ID {user_id}\n"
            f"üéâ –°–∏–≥–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã! –ò–≥—Ä–∞–π—Ç–µ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ!"
        )
    else:
        text = f"üì© –°–æ–±—ã—Ç–∏–µ {event} –¥–ª—è ID {user_id}"

    await send_notification(telegram_id, text)
    return {"status": "ok"}

async def send_notification(chat_id, text):
    try:
        await bot.send_message(chat_id, text)
    except BotBlocked:
        await send_notification(DEBUG_TELEGRAM_ID, f"‚ùå –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Telegram ID {chat_id}")
    except ChatNotFound:
        await send_notification(DEBUG_TELEGRAM_ID, f"‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID {chat_id}")
    except RetryAfter as e:
        await asyncio.sleep(e.timeout)
        await bot.send_message(chat_id, text)
    except Exception as e:
        await send_notification(DEBUG_TELEGRAM_ID, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.callback_query_handler(lambda c: c.data == "menu")
async def handle_main_menu(callback_query: types.CallbackQuery):
    telegram_id = callback_query.from_user.id
    cursor.execute("SELECT status FROM users WHERE telegram_id = ?", (telegram_id,))
    user = cursor.fetchone()

    photo = "https://i.ibb.co/fd2zyZ0D/1a3411a4-db55-46b3-84a8-f4da1b57aeff.png"
    caption = "üëã <b>–•—É—à –∫–µ–ª–∏–±—Å–∞–Ω!</b>\n\n–ë—É –µ—Ä–¥–∞ —Å–µ–Ω 1WIN —É—á—É–Ω –∏—à–æ–Ω—á–ª–∏ —Å–∏–≥–Ω–∞–ª–ª–∞—Ä –æ–ª–∞—Å–∞–Ω.\n"

    if user and user[1] in ["registration", "deposit"]:
        caption += "‚úÖ –°–µ–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω—Å–∞–Ω. –≠–Ω–¥–∏ –¥–µ–ø–æ–∑–∏—Ç –∫–∏—Ä–∏—Ç –≤–∞ —Å–∏–≥–Ω–∞–ª–ª–∞—Ä —Ñ–∞–æ–ª–ª–∞—à–∞–¥–∏. üí∞"
    else:
        caption += "üìù –ò–ª—Ç–∏–º–æ—Å, —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à —É—á—É–Ω —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å –≤–∞ —è–Ω–≥–∏ –∞–∫–∫–∞—É–Ω—Ç —è—Ä–∞—Ç."

    await callback_query.message.answer_photo(photo=photo, caption=caption, reply_markup=get_main_menu(), parse_mode="HTML")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "register")
async def handle_register_button(callback_query: types.CallbackQuery):
    telegram_id = callback_query.from_user.id
    link = f"https://1wtsmf.com/v3/aviator-fire?p=1ylh&sub1={telegram_id}"

    cursor.execute("SELECT status FROM users WHERE telegram_id = ?", (telegram_id,))
    user = cursor.fetchone()

    if user and user[0] in ["registration", "deposit"]:
        text = "‚úÖ –°–µ–Ω –∞–ª–ª–∞“õ–∞—á–æ–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω—Å–∞–Ω.\n\nüí∞ –ò–ª—Ç–∏–º–æ—Å, –¥–µ–ø–æ–∑–∏—Ç –∫–∏—Ä–∏—Ç –≤–∞ —Å–∏–≥–Ω–∞–ª–ª–∞—Ä —Ñ–∞–æ–ª–ª–∞—à–∞–¥–∏."
    else:
        text = (
            f"üìù –ò–ª—Ç–∏–º–æ—Å, –∞–≤–≤–∞–ª –º–∞–Ω–∞ –±—É “≥–∞–≤–æ–ª–∞ –æ—Ä“õ–∞–ª–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç:\n"
            f"üëâ <a href=\"{link}\">{link}</a>\n\n"
            "üîë –ö–µ–π–∏–Ω –±–æ—Ç —Å–µ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∫ —Ç–∞–Ω–∏–± –æ–ª–∞–¥–∏."
        )

    await callback_query.message.answer(text, parse_mode="HTML", reply_markup=back_to_menu_button())
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "instruction")
async def handle_instruction_button(callback_query: types.CallbackQuery):
    text = (
        "üìñ <b>–ô—û—Ä–∏“õ–Ω–æ–º–∞:</b>\n\n"
        "1Ô∏è‚É£ –†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç –º–∞–Ω–∞ –±—É “≥–∞–≤–æ–ª–∞ –æ—Ä“õ–∞–ª–∏\n"
        "2Ô∏è‚É£ –ë–æ—Ç —Å–µ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∫ —Ç–∞–Ω–∏–± –æ–ª–∞–¥–∏\n"
        "3Ô∏è‚É£ –î–µ–ø–æ–∑–∏—Ç –∫–∏—Ä–∏—Ç\n"
        "4Ô∏è‚É£ –°–∏–≥–Ω–∞–ª–ª–∞—Ä —Ñ–∞–æ–ª –±—û–ª–∞–¥–∏ ‚úÖ"
    )
    await callback_query.message.answer(text, parse_mode="HTML", reply_markup=back_to_menu_button())
    await callback_query.answer()

@dp.message_handler(commands=["menu"])
async def show_menu_command(message: Message):
    telegram_id = message.from_user.id
    cursor.execute("SELECT status FROM users WHERE telegram_id = ?", (telegram_id,))
    user = cursor.fetchone()

    photo = "https://i.ibb.co/fd2zyZ0D/1a3411a4-db55-46b3-84a8-f4da1b57aeff.png"
    caption = "üëã <b>–•—É—à –∫–µ–ª–∏–±—Å–∞–Ω!</b>\n\n–ë—É –µ—Ä–¥–∞ —Å–µ–Ω 1WIN —É—á—É–Ω –∏—à–æ–Ω—á–ª–∏ —Å–∏–≥–Ω–∞–ª–ª–∞—Ä –æ–ª–∞—Å–∞–Ω.\n"

    if user and user[1] in ["registration", "deposit"]:
        caption += "‚úÖ –°–µ–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω—Å–∞–Ω. –≠–Ω–¥–∏ –¥–µ–ø–æ–∑–∏—Ç –∫–∏—Ä–∏—Ç –≤–∞ —Å–∏–≥–Ω–∞–ª–ª–∞—Ä —Ñ–∞–æ–ª–ª–∞—à–∞–¥–∏. üí∞"
    else:
        caption += "üìù –ò–ª—Ç–∏–º–æ—Å, —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à —É—á—É–Ω —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å –≤–∞ —è–Ω–≥–∏ –∞–∫–∫–∞—É–Ω—Ç —è—Ä–∞—Ç."

    await message.answer_photo(photo=photo, caption=caption, reply_markup=get_main_menu(), parse_mode="HTML")

def get_main_menu():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register"))
    keyboard.add(InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction"))
    keyboard.add(InlineKeyboardButton("üí¨ Help", url="https://t.me/YOUR_ADMIN_USERNAME"))
    return keyboard

def back_to_menu_button():
    return InlineKeyboardMarkup().add(InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data="menu"))

def start_api():
    uvicorn.run("main:app", host="0.0.0.0", port=8000)

def start_bot():
    executor.start_polling(dp, skip_updates=True)

if __name__ == "__main__":
    threading.Thread(target=start_api).start()
    start_bot()
