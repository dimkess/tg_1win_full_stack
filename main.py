import asyncio
import sqlite3
from fastapi import FastAPI
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, RetryAfter
from dotenv import load_dotenv
import os
import uvicorn

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
app = FastAPI()

conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER,
        user_id TEXT,
        status TEXT,
        PRIMARY KEY (telegram_id, user_id)
    )
""")
conn.commit()

DEBUG_TELEGRAM_ID = 1266217883

@dp.message_handler(commands=['start'])
async def send_welcome(message: Message):
    telegram_id = message.from_user.id
    cursor.execute("SELECT status FROM users WHERE telegram_id = ? AND user_id != ''", (telegram_id,))
    user = cursor.fetchone()
    if user and user[0] in ["registration", "deposit"]:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–∞—à ID –≤ 1WIN - {user_id}. –í–Ω–µ—Å–∏—Ç–µ –¥–µ–ø–æ–∑–∏—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
        return

    keyboard = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text="“≤–∞, –º–µ–Ω “≥–∞—ë—Ç–∏–º–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à–≥–∞ —Ç–∞–π—ë—Ä–º–∞–Ω!", callback_data="ready_to_change")
    keyboard.add(button)

    welcome_text = (
        "üëã **–°–∞–ª–æ–º, –∞–∑–∏–∑ –¥—û—Å—Ç!**\n\n"
        "–ú–µ–Ω ‚Äî —Ç–∞–∂—Ä–∏–±–∞–ª–∏ –¥–∞—Å—Ç—É—Ä—á–∏, –≤–∞ –º–µ–Ω–¥–∞ —Å–µ–Ω —É—á—É–Ω “≥–∞“õ–∏“õ–∏–π –ª–∞–π—Ñ—Ö–∞–∫ –±–æ—Ä! üí°\n\n"
        "üíª –î–∞—Å—Ç—É—Ä—á–∏–ª–∞—Ä —è—Ö—à–∏ –ø—É–ª —Ç–æ–ø–∏—à–∞–¥–∏, –ª–µ–∫–∏–Ω *“≥–∞–º–º–∞–¥–∞–Ω –∫—û–ø—Ä–æ“õ* –¥–∞—Ä–æ–º–∞–¥ “õ–∏–ª–º–æ“õ—á–∏–º–∏—Å–∏–∑?\n\n"
        "ü§ñ –ú–µ–Ω ChatGPT –∞—Å–æ—Å–∏–¥–∞ –∏—à–ª–∞–π–¥–∏–≥–∞–Ω –±–æ—Ç –≤–∞ –∏–ª–æ–≤–∞ —è—Ä–∞—Ç–¥–∏–º. –£ **Aviator** —û–π–∏–Ω–∏–¥–∞–≥–∏ "
        "—Å–∏–≥–Ω–∞–ª–ª–∞—Ä–Ω–∏ *95% –∞–Ω–∏“õ–ª–∏–∫–¥–∞* —Ç–∞—Ö–º–∏–Ω “õ–∏–ª–∞–¥–∏! üéØ\n\n"
        "üîÅ –ë—É –∏–º–∫–æ–Ω–∏—è—Ç “≥–∞—ë—Ç–∏–Ω–≥–∏–∑–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à–≥–∞ —ë—Ä–¥–∞–º –±–µ—Ä–∞–¥–∏!\n\n"
        "‚ú® **“≤–∞—ë—Ç–∏–Ω–≥–∏–∑–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à–≥–∞ —Ç–∞–π—ë—Ä–º–∏—Å–∏–∑?**"
    )

    photo_url = "https://i.ibb.co/fd2zyZ0D/1a3411a4-db55-46b3-84a8-f4da1b57aeff.png"
    cursor.execute("DELETE FROM users WHERE telegram_id = ? AND user_id = ''", (telegram_id,))
    cursor.execute(
        "INSERT INTO users (telegram_id, user_id, status) VALUES (?, ?, ?)",
        (telegram_id, "", "waiting_for_button")
    )
    conn.commit()
    await message.answer_photo(
        photo=photo_url,
        caption=welcome_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data == "ready_to_change")
async def handle_button(callback_query: types.CallbackQuery):
    telegram_id = callback_query.from_user.id
    link = f"https://1wtsmf.com/v3/aviator-fire?p=1ylh&sub1={telegram_id}"

    register_keyboard = InlineKeyboardMarkup()
    register_button = InlineKeyboardButton(
        text="üìù –†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à",
        url=link
    )
    register_keyboard.add(register_button)

    caption = (
        "üöÄ <b>“ö–∞—Ä–∞, –¥—û—Å—Ç–∏–º!</b>\n\n"
        "–ê–≤–≤–∞–ª–æ –º–∞–Ω–∞ –±—É “≥–∞–≤–æ–ª–∞ –æ—Ä“õ–∞–ª–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à–∏–Ω–≥ –∫–µ—Ä–∞–∫:\nüëâ <a href=\"{link}\">{link}</a>\n\n"
        "üîë –ö–µ–π–∏–Ω —ç—Å–∞ <b>1WIN ID —Ä–∞“õ–∞–º–∏–Ω–≥–Ω–∏</b> –º–µ–Ω–≥–∞ —é–±–æ—Ä.\n\n"
        "‚ö†Ô∏è –ú—É“≥–∏–º–∏ ‚Äî –±–æ—Ç —Ñ–∞“õ–∞—Ç <u>—è–Ω–≥–∏ –∞–∫–∫–∞—É–Ω—Ç–ª–∞—Ä</u> –±–∏–ª–∞–Ω –∏—à–ª–∞–π–¥–∏.\n"
        "–ê–≤–≤–∞–ª —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç, —Å—û–Ω–≥ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∫ —Ç–µ–∫—à–∏—Ä–∞–¥–∏ ‚úÖ\n\n"
        "üì® –ê–≥–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏–∫ –±—û–ª–º–∞—Å–∞, ID —Ä–∞“õ–∞–º–Ω–∏ —û–∑–∏ —é–±–æ—Ä—Å–∞–Ω “≥–∞–º –±—û–ª–∞–¥–∏.\n\n"
        "‚è≥ <b>–ö—É—Ç–∞–º–∞–Ω!</b>"
    )

    cursor.execute("UPDATE users SET status = ? WHERE telegram_id = ?", ("waiting_for_user_id", telegram_id))
    conn.commit()

    await callback_query.message.answer_photo(
        photo="https://i.ibb.co/xtnY7Dvn/255ef825-defe-483d-a576-e5c6066e940b.png",
        caption=caption.format(link=link),
        reply_markup=register_keyboard,
        parse_mode="HTML"
    )
    await callback_query.answer()

@dp.message_handler()
async def handle_user_id(message: Message):
    telegram_id = message.from_user.id
    user_input = message.text.strip().lower()

    if not user_input.isdigit():
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ ID –Ω–µ —Ü–∏—Ñ—Ä—ã
        text = (
            "üôå –î—û—Å—Ç–∏–º, –±–∞—Ä—á–∞ —Å–∞–≤–æ–ª–ª–∞—Ä–∏–Ω–≥–≥–∞ –º–∞–º–Ω—É–Ω–∏—è—Ç –±–∏–ª–∞–Ω –∂–∞–≤–æ–± –±–µ—Ä–∞–º–∞–Ω!\n\n"
            "–õ–µ–∫–∏–Ω –∞–≤–≤–∞–ª –∏–ª—Ç–∏–º–æ—Å, ‚è≥ –º–∞–Ω–∞ –±—É “≥–∞–≤–æ–ª–∞ –æ—Ä“õ–∞–ª–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç:\n"
            "üëâ <b>–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à ‚Äî –±—É –±–∏—Ä–∏–Ω—á–∏ –≤–∞ –º—É“≥–∏–º “õ–∞–¥–∞–º!</b> üìù\n\n"
            "–®—É–Ω–¥–∞–Ω —Å—û–Ω–≥ ID —Ä–∞“õ–∞–º–∏–Ω–≥–Ω–∏ —ë–∑—Å–∞–Ω, “≥–∞–º–º–∞—Å–∏–Ω–∏ –¥–∞–≤–æ–º —ç—Ç—Ç–∏—Ä–∞–º–∏–∑! üöÄ"
        )
        await message.answer(text, parse_mode="HTML")
        return

    user_id = user_input

    cursor.execute("SELECT status FROM users WHERE telegram_id = ?", (telegram_id,))
    user = cursor.fetchone()

    if not user:
        await message.answer("‚ùó –û—Ç–ø—Ä–∞–≤—å /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    if user[0] not in ["waiting_for_user_id", "waiting_for_button"]:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–∞—à ID –≤ 1WIN - {user_id}. –í–Ω–µ—Å–∏—Ç–µ –¥–µ–ø–æ–∑–∏—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
        return

    cursor.execute("SELECT status FROM users WHERE telegram_id = ? AND user_id = ?", (telegram_id, user_id))
    existing_user = cursor.fetchone()

    if existing_user:
        status = existing_user[0]
        if status == "id_sent":
                await message.answer("‚è≥ ID —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –¥–µ–ø–æ–∑–∏—Ç–∞.")
                return
        elif status in ["registration", "deposit"]:
                await message.answer(f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–∞—à ID –≤ 1WIN ‚Äî {user_id}. –í–Ω–µ—Å–∏—Ç–µ –¥–µ–ø–æ–∑–∏—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.")
                return


    cursor.execute(
        "UPDATE users SET user_id = ?, status = ? WHERE telegram_id = ? AND user_id = ''",
        (user_id, "id_sent", telegram_id)
    )
    if cursor.rowcount == 0:
        cursor.execute(
            "INSERT INTO users (telegram_id, user_id, status) VALUES (?, ?, ?)",
            (telegram_id, user_id, "id_sent")
        )
    conn.commit()


    text = (
        f"üïê ID {user_id} “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏. –ë–∏—Ä–æ–∑ –≤–∞“õ—Ç –∏—á–∏–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à “≥–∞“õ–∏–¥–∞ —Ö–∞–±–∞—Ä –æ–ª–∞—Å–∞–Ω. üì©\n\n"
        "–ê–≥–∞—Ä 1 —Å–æ–∞—Ç –∏—á–∏–¥–∞ “≥–µ—á “õ–∞–Ω–¥–∞–π —Ö–∞–±–∞—Ä –∫–µ–ª–º–∞—Å–∞, 2 —Ç–∞ —Å–∞–±–∞–± –±—û–ª–∏—à–∏ –º—É–º–∫–∏–Ω:\n"
        "1Ô∏è‚É£ –°–µ–Ω “≥–∞–≤–æ–ª–∞ –æ—Ä“õ–∞–ª–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–º–∞–¥–∏–Ω–≥.\n"
        "2Ô∏è‚É£ –°–µ–Ω–¥–∞ –æ–ª–¥–∏–Ω–¥–∞–Ω –º–∞–≤–∂—É–¥ –±—û–ª–≥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –±–æ—Ä ‚Äî —É –±–æ—Ç –±–∏–ª–∞–Ω –∏—à–ª–∞–º–∞–π–¥–∏.\n\n"
        "üìå –¢—û–ª–∏“õ –π—û—Ä–∏“õ–Ω–æ–º–∞–Ω–∏ –∫—û—Ä–∏—à: üëâ https://—Ç–≤–æ—è—Ç-—Å–∞–π—Ç.—É–∑/instruction"
    )

    await message.answer(text)

@app.get("/postback")
async def postback(event: str, user_id: str, sub1: str, amount: str = "0"):
    if not sub1.isdigit():
        await send_notification(DEBUG_TELEGRAM_ID, f"‚ùå sub1 –Ω–µ —á–∏—Å–ª–æ: {sub1}")
        return {"status": "invalid telegram_id"}

    telegram_id = int(sub1)

    cursor.execute("SELECT * FROM users WHERE telegram_id = ? AND user_id = ?", (telegram_id, user_id))
    user = cursor.fetchone()

    if not user:
        cursor.execute(
            "INSERT OR IGNORE INTO users (telegram_id, user_id, status) VALUES (?, ?, ?)",
            (telegram_id, user_id, event)
        )
        conn.commit()
        if telegram_id != DEBUG_TELEGRAM_ID:
            await send_notification(DEBUG_TELEGRAM_ID, f"‚ÑπÔ∏è –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id}, user_id={user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∏–∑ –ø–æ—Å—Ç–±—ç–∫–∞")
    else:
        cursor.execute(
            "UPDATE users SET status = ? WHERE telegram_id = ? AND user_id = ?",
            (event, telegram_id, user_id)
        )
        conn.commit()

    if event == "registration":
        text = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è ID {user_id}\nüì• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤!"
    elif event == "deposit":
        text = f"üí∞ –î–µ–ø–æ–∑–∏—Ç –Ω–∞ {amount}‚ÇΩ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –¥–ª—è ID {user_id}\nüéâ –°–∏–≥–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã! –ò–≥—Ä–∞–π—Ç–µ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ!"
    else:
        text = f"üì© –°–æ–±—ã—Ç–∏–µ {event} –¥–ª—è ID {user_id}"

    await send_notification(telegram_id, text)
    return {"status": "ok"}

async def send_notification(chat_id, text):
    try:
        await bot.send_message(chat_id, text)
    except BotBlocked:
        await send_notification(DEBUG_TELEGRAM_ID, f"‚ùå –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Telegram ID {chat_id}")
    except ChatNotFound:
        await send_notification(DEBUG_TELEGRAM_ID, f"‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID {chat_id}")
    except RetryAfter as e:
        await asyncio.sleep(e.timeout)
        await bot.send_message(chat_id, text)
    except Exception as e:
        await send_notification(DEBUG_TELEGRAM_ID, f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def start_bot_polling():
    try:
        await dp.start_polling()
    finally:
        await bot.session.close()

def start():
    loop = asyncio.get_event_loop()
    loop.create_task(start_bot_polling())
    config = uvicorn.Config(app, host="0.0.0.0", port=8000, loop="asyncio")
    server = uvicorn.Server(config)
    loop.run_until_complete(server.serve())

if __name__ == "__main__":
    start()
