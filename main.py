import asyncio
import sqlite3
from fastapi import FastAPI
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, RetryAfter
from dotenv import load_dotenv
import os
import uvicorn

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
app = FastAPI()

conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER,
        user_id TEXT,
        status TEXT,
        PRIMARY KEY (telegram_id, user_id)
    )
""")
conn.commit()

# –í–∞—à Telegram ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
DEBUG_TELEGRAM_ID = 1266217883

@dp.message_handler(commands=['start'])
async def send_welcome(message: Message):
    telegram_id = message.from_user.id
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É
    keyboard = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text="“≤–∞, –º–µ–Ω “≥–∞—ë—Ç–∏–º–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à–≥–∞ —Ç–∞–π—ë—Ä–º–∞–Ω!", callback_data="ready_to_change")
    keyboard.add(button)
    
    # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = (
        "–°–∞–ª–æ–º, –∞–∑–∏–∑ –¥—û—Å—Ç! –ú–µ–Ω –∫—û–ø –π–∏–ª–ª–∏–∫ —Ç–∞–∂—Ä–∏–±–∞–≥–∞ —ç–≥–∞ –±—û–ª–≥–∞–Ω –¥–∞—Å—Ç—É—Ä—á–∏–º–∞–Ω. "
        "–î–∞—Å—Ç—É—Ä—á–∏–ª–∞—Ä –∫—û–ø –¥–∞—Ä–æ–º–∞–¥ –æ–ª–∏—à–∞–¥–∏, –ª–µ–∫–∏–Ω —è–Ω–∞–¥–∞ –∫—û–ø—Ä–æ“õ –∏—Å—Ç–∞–≥–∞–Ω–¥–∞ –Ω–∏–º–∞ “õ–∏–ª–∏—à –∫–µ—Ä–∞–∫? "
        "–ú–µ–Ω ChatGPT –±–∏–ª–∞–Ω –±–µ–≤–æ—Å–∏—Ç–∞ –∏—à–ª–∞–π–¥–∏–≥–∞–Ω –±–æ—Ç –≤–∞ –∏–ª–æ–≤–∞–Ω–∏ —è—Ä–∞—Ç–¥–∏–º, —É Aviator —û–π–∏–Ω–∏–¥–∞–≥–∏ "
        "—Å–∏–≥–Ω–∞–ª–ª–∞—Ä–Ω–∏ 95% “≥–æ–ª–∞—Ç–¥–∞ —Ç—û“ì—Ä–∏ —Ç–∞—Ö–º–∏–Ω “õ–∏–ª–∞–¥–∏. “≤–∞—ë—Ç–∏–Ω–≥–∏–∑–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à–≥–∞ —Ç–∞–π—ë—Ä–º–∏—Å–∏–∑?"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
    # –ó–∞–º–µ–Ω–∏ 'photo_url' –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
    photo_url = "https://cdn.geekvibesnation.com/wp-media-folder-geek-vibes-nation/wp-content/uploads/2024/04/aviator-game-review-1024x475.png"  # –£–∫–∞–∂–∏ —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    cursor.execute("DELETE FROM users WHERE telegram_id = ?", (telegram_id,))
    cursor.execute(
        "INSERT INTO users (telegram_id, user_id, status) VALUES (?, ?, ?)",
        (telegram_id, "", "waiting_for_button")
    )
    conn.commit()
    await message.answer_photo(photo=photo_url, caption=welcome_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "ready_to_change")
async def handle_button(callback_query: types.CallbackQuery):
    telegram_id = callback_query.from_user.id
    link = f"https://1wtsmf.com/v3/aviator-fire?p=1ylh&sub1={telegram_id}"
    cursor.execute(
        "UPDATE users SET status = ? WHERE telegram_id = ?",
        ("waiting_for_user_id", telegram_id)
    )
    conn.commit()
    await callback_query.message.answer(
        f"“ö–∞—Ä–∞, –¥—û—Å—Ç–∏–º, –∞–≤–≤–∞–ª–æ –º–∞–Ω–∞ –±—É “≥–∞–≤–æ–ª–∞ –æ—Ä“õ–∞–ª–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à–∏–Ω–≥ –∫–µ—Ä–∞–∫: {link}\n"
        "–≤–∞ ID —Ä–∞“õ–∞–º–∏–Ω–≥–Ω–∏ –º–µ–Ω–≥–∞ —é–±–æ—Ä.\n\n"
        "–ú—É“≥–∏–º–∏ ‚Äî –º–µ–Ω–∏–Ω–≥ –±–æ—Ç–∏–º –≤–∞ –∏–ª–æ–≤–∞–º —Ñ–∞“õ–∞—Ç —è–Ω–≥–∏ 1WIN –∞–∫–∫–∞—É–Ω—Ç–ª–∞—Ä–∏ –±–∏–ª–∞–Ω –∏—à–ª–∞–π–¥–∏.\n"
        "–°–µ–Ω —Ç—É–≥–∞—Ç–≥–∞–Ω–∏–Ω–≥–¥–∞–Ω —Å—û–Ω–≥, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∫ —Ç–∞—Ä–∑–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à–Ω–∏ —Ç–∞—Å–¥–∏“õ–ª–∞–π–¥–∏ "
        "—ë–∫–∏ ID —Ä–∞“õ–∞–º–Ω–∏ —û–∑–∏–Ω–≥ —é–±–æ—Ä—Å–∞–Ω “≥–∞–º –±—û–ª–∞–¥–∏."
    )
    await callback_query.answer()

@dp.message_handler()
async def handle_user_id(message: Message):
    telegram_id = message.from_user.id
    user_id = message.text.strip()

    cursor.execute("SELECT status FROM users WHERE telegram_id = ?", (telegram_id,))
    user = cursor.fetchone()

    if not user:
        await message.answer("‚ùó –û—Ç–ø—Ä–∞–≤—å /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    if user[0] not in ["waiting_for_user_id", "waiting_for_button"]:
        await message.answer("‚è≥ ID —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –¥–µ–ø–æ–∑–∏—Ç–∞.")
        return

    if not user_id.isdigit():
        await message.answer("‚ùó –û—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ ID 1win (—Ü–∏—Ñ—Ä—ã).")
        return

    cursor.execute("SELECT status FROM users WHERE telegram_id = ? AND user_id = ?", (telegram_id, user_id))
    existing_user = cursor.fetchone()

    if existing_user:
        if existing_user[0] in ["registration", "deposit"]:
            await message.answer(f"‚úÖ ID {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –°—Ç–∞—Ç—É—Å: {existing_user[0]}.")
            return
        else:
            await message.answer("‚è≥ ID —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –¥–µ–ø–æ–∑–∏—Ç–∞.")
            return

    cursor.execute(
        "UPDATE users SET user_id = ?, status = ? WHERE telegram_id = ? AND user_id = ''",
        (user_id, "id_sent", telegram_id)
    )
    if cursor.rowcount == 0:
        cursor.execute(
            "INSERT INTO users (telegram_id, user_id, status) VALUES (?, ?, ?)",
            (telegram_id, user_id, "id_sent")
        )
    conn.commit()
    await message.answer(f"üïê ID {user_id} –ø—Ä–∏–Ω—è—Ç. –ñ–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@app.get("/postback")
async def postback(event: str, user_id: str, sub1: str, amount: str = "0"):
    if not sub1.isdigit():
        print(f"‚ùå sub1 –Ω–µ —á–∏—Å–ª–æ: {sub1}")
        await send_notification(DEBUG_TELEGRAM_ID, f"‚ùå sub1 –Ω–µ —á–∏—Å–ª–æ: {sub1}")
        return {"status": "invalid telegram_id"}

    telegram_id = int(sub1)

    cursor.execute("SELECT * FROM users WHERE telegram_id = ? AND user_id = ?", (telegram_id, user_id))
    user = cursor.fetchone()

    if not user:
        cursor.execute(
            "INSERT OR IGNORE INTO users (telegram_id, user_id, status) VALUES (?, ?, ?)",
            (telegram_id, user_id, event)
        )
        conn.commit()
        print(f"‚ÑπÔ∏è –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id}, user_id={user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∏–∑ –ø–æ—Å—Ç–±—ç–∫–∞")
        await send_notification(DEBUG_TELEGRAM_ID, f"‚ÑπÔ∏è –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id}, user_id={user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∏–∑ –ø–æ—Å—Ç–±—ç–∫–∞")
    else:
        cursor.execute(
            "UPDATE users SET status = ? WHERE telegram_id = ? AND user_id = ?",
            (event, telegram_id, user_id)
        )
        conn.commit()

    if event == "registration":
        text = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è ID {user_id}"
    elif event == "deposit":
        text = f"üí∞ –î–µ–ø–æ–∑–∏—Ç –Ω–∞ {amount}‚ÇΩ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –¥–ª—è ID {user_id}"
    else:
        text = f"üì© –°–æ–±—ã—Ç–∏–µ {event} –¥–ª—è ID {user_id}"

    await send_notification(telegram_id, text)
    return {"status": "ok"}

async def send_notification(chat_id, text):
    try:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é Telegram ID {chat_id}: {text}")
        await bot.send_message(chat_id, text)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Telegram ID {chat_id}")
    except BotBlocked:
        print(f"‚ùå –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Telegram ID {chat_id}")
        await send_notification(DEBUG_TELEGRAM_ID, f"‚ùå –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Telegram ID {chat_id}")
    except ChatNotFound:
        print(f"‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID {chat_id}")
        await send_notification(DEBUG_TELEGRAM_ID, f"‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID {chat_id}")
    except RetryAfter as e:
        print(f"‚ùå –õ–∏–º–∏—Ç, –∂–¥—É {e.timeout} —Å–µ–∫")
        await asyncio.sleep(e.timeout)
        await bot.send_message(chat_id, text)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram ID {chat_id}: {e}")
        await send_notification(DEBUG_TELEGRAM_ID, f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def start_bot_polling():
    try:
        await dp.start_polling()
    finally:
        await bot.session.close()

def start():
    loop = asyncio.get_event_loop()
    loop.create_task(start_bot_polling())
    config = uvicorn.Config(app, host="0.0.0.0", port=8000, loop="asyncio")
    server = uvicorn.Server(config)
    loop.run_until_complete(server.serve())

if __name__ == "__main__":
    start()
